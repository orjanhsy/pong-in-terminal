// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/main.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PongService_UpdatePaddleDirection_FullMethodName = "/pb.PongService/UpdatePaddleDirection"
	PongService_StreamGameState_FullMethodName       = "/pb.PongService/StreamGameState"
)

// PongServiceClient is the client API for PongService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PongServiceClient interface {
	UpdatePaddleDirection(ctx context.Context, in *PaddleUpdateRequest, opts ...grpc.CallOption) (*PaddleUpdateResponse, error)
	StreamGameState(ctx context.Context, in *GameStateRequest, opts ...grpc.CallOption) (PongService_StreamGameStateClient, error)
}

type pongServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPongServiceClient(cc grpc.ClientConnInterface) PongServiceClient {
	return &pongServiceClient{cc}
}

func (c *pongServiceClient) UpdatePaddleDirection(ctx context.Context, in *PaddleUpdateRequest, opts ...grpc.CallOption) (*PaddleUpdateResponse, error) {
	out := new(PaddleUpdateResponse)
	err := c.cc.Invoke(ctx, PongService_UpdatePaddleDirection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pongServiceClient) StreamGameState(ctx context.Context, in *GameStateRequest, opts ...grpc.CallOption) (PongService_StreamGameStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PongService_ServiceDesc.Streams[0], PongService_StreamGameState_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pongServiceStreamGameStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PongService_StreamGameStateClient interface {
	Recv() (*GameStateResponse, error)
	grpc.ClientStream
}

type pongServiceStreamGameStateClient struct {
	grpc.ClientStream
}

func (x *pongServiceStreamGameStateClient) Recv() (*GameStateResponse, error) {
	m := new(GameStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PongServiceServer is the server API for PongService service.
// All implementations must embed UnimplementedPongServiceServer
// for forward compatibility
type PongServiceServer interface {
	UpdatePaddleDirection(context.Context, *PaddleUpdateRequest) (*PaddleUpdateResponse, error)
	StreamGameState(*GameStateRequest, PongService_StreamGameStateServer) error
	mustEmbedUnimplementedPongServiceServer()
}

// UnimplementedPongServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPongServiceServer struct {
}

func (UnimplementedPongServiceServer) UpdatePaddleDirection(context.Context, *PaddleUpdateRequest) (*PaddleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaddleDirection not implemented")
}
func (UnimplementedPongServiceServer) StreamGameState(*GameStateRequest, PongService_StreamGameStateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGameState not implemented")
}
func (UnimplementedPongServiceServer) mustEmbedUnimplementedPongServiceServer() {}

// UnsafePongServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PongServiceServer will
// result in compilation errors.
type UnsafePongServiceServer interface {
	mustEmbedUnimplementedPongServiceServer()
}

func RegisterPongServiceServer(s grpc.ServiceRegistrar, srv PongServiceServer) {
	s.RegisterService(&PongService_ServiceDesc, srv)
}

func _PongService_UpdatePaddleDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaddleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PongServiceServer).UpdatePaddleDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PongService_UpdatePaddleDirection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PongServiceServer).UpdatePaddleDirection(ctx, req.(*PaddleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PongService_StreamGameState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GameStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PongServiceServer).StreamGameState(m, &pongServiceStreamGameStateServer{stream})
}

type PongService_StreamGameStateServer interface {
	Send(*GameStateResponse) error
	grpc.ServerStream
}

type pongServiceStreamGameStateServer struct {
	grpc.ServerStream
}

func (x *pongServiceStreamGameStateServer) Send(m *GameStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PongService_ServiceDesc is the grpc.ServiceDesc for PongService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PongService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PongService",
	HandlerType: (*PongServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePaddleDirection",
			Handler:    _PongService_UpdatePaddleDirection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGameState",
			Handler:       _PongService_StreamGameState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/main.proto",
}
